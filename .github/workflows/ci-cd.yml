name: CI/CD

on:
  push:
  pull_request:

jobs:
  backend-code-validation:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
        with:
          submodules: "recursive"

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Create Env File
        run: echo "${{ secrets.DEV_ENV_FILE }}" > dev.env

      - name: Build Container
        run: docker-compose --env-file dev.env -f docker-compose.dev.yml up -d --build backend

      - name: Run Code Quality Checks
        run: |
          docker-compose -f docker-compose.dev.yml exec -T backend poetry run \
            ruff check .
          docker-compose -f docker-compose.dev.yml exec -T backend poetry run \
            mypy .
          docker-compose -f docker-compose.dev.yml exec -T backend poetry run \
            bandit . -r -c pyproject.toml

      - name: Run tests
        run: |
          docker-compose --env-file dev.env -f docker-compose.dev.yml exec -T backend poetry run \
            pytest

      - name: Cleanup
        run: docker-compose --env-file dev.env -f docker-compose.dev.yml down -v

  frontend-code-validation:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
        with:
          submodules: "recursive"

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Create Env File
        run: echo "${{ secrets.DEV_ENV_FILE }}" > dev.env

      - name: Build
        run: docker-compose --env-file dev.env -f docker-compose.dev.yml up -d --build frontend

      # Some code checks

      - name: Cleanup
        run: docker-compose --env-file dev.env -f docker-compose.dev.yml down -v

  deploy:
    runs-on: ubuntu-latest
    needs: [backend-code-validation, frontend-code-validation]
    if: github.ref == 'refs/heads/master'
    environment: prod

    steps:
      - uses: actions/checkout@master
        with:
          submodules: "recursive"

      - name: Create Env File
        run: echo "${{ secrets.PROD_ENV_FILE }}" > prod.env

      - name: Login to Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build Images
        run: |
          COMMIT_SHA=${{ github.sha }} \
          BUILD_SOURCE_MAP=true \
            docker-compose --env-file prod.env -f docker-compose.prod.yml build

      - name: Push Images
        run: |
          docker push nkl322/django-pet-backend:latest
          docker push nkl322/django-pet-nginx:latest

      - name: Create Directory on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          script: |
            mkdir -p django-pet/

      - name: Copy files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          source: prod.env,docker-compose.prod.yml
          target: django-pet/

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          script: |
            cd django-pet/
            docker-compose --env-file prod.env -f docker-compose.prod.yml down
            docker-compose --env-file prod.env -f docker-compose.prod.yml pull
            docker-compose --env-file prod.env -f docker-compose.prod.yml up -d --no-build
            docker image prune -f
